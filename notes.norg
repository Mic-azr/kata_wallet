Notes to take while I work on project

4/1/2025
Added basic setters and getters to Wallet class
Wrote a unit test for Wallet to test getters and setters
Will need to register my email with Open Exchange Rates for an API key
Going to read this article https://docs.openexchangerates.org/reference/api-introduction before starting work on CurrencyConverter
Wanted to learn more about the git stash command and now I'm going on a journey into the developer's tutorial in the Git documentation
That's something I had ought to work through in an editor as I read. I shouldn't get distracted right now. But that's something I want to make time for later.
Made my first API request in the browser! I have my API key now, and there's even some Java code provided in the documentation. Sweet!
Spoke too soon; the request I sent to /currencies.json went through because that doesn't need an API key. The key I got isn't working even after I verified my email.
Keep getting a 401 invalid_app_id error
Maybe this is something I should try and resolve tomorrow. I don't want to be using up all my requests if my key hasn't been validated yet.

4/3/2025
Going to see if API key will work today.
Still getting an invalid id error when making an API request in the browser documentation. Sent an email to support.
Going to try https://api.fixer.io/ 
Maybe not! Why would they want my street address?
Found an API to use at https://apiplugin.com/dashboard
Importing java.net.HttpURLConnection into CurrencyConverter. No idea how to use it but I will learn.
Found this resource to help write Java code (no example Java code in the CurrenctExchangeAPI documentation): https://www.omi.me/blogs/api-guides/how-to-fetch-currency-exchange-rates-using-exchangerate-api-in-java
Shouldn't use that Java library! Will be using this instead: https://docs.oracle.com/en/java/javase/24/docs/api/java.net.http/java/net/http/HttpRequest.html
Results from endpoint will be formatted as JSON, might need to import a library to handle that

4/4/2025
Found a free currency exchange api at https://www.exchangerate-api.com/
Will be using that for CurrencyConverter class

4/7/2025
Next big hurdle for CurrencyConverter is to parse the JSON request I will get back from the api.
I need the currency exchange rate from one currency to another. That value is in the request, I just need to pull it out and save it to a variable.
I think I should make sure I have Wallet working and tested before I import more stuff into this project though. I bet Java has a standard library for JSON objects.
Copilot's code for the Wallet class looks a little funny:
'''java
package com.codekata_wallet;

import java.util.List;

public class Wallet {
    private List<Stock> stocks;

    public Wallet(List<Stock> stocks) {
        this.stocks = stocks;
    }

    public List<Stock> getStocks() {
        return stocks;
    }

    // Placeholder for computing the wallet value
    public double getValue(String targetCurrency, CurrencyConverter converter) {
        double totalValue = 0.0;
        for (Stock stock : stocks) {
            double rate = converter.getExchangeRate(stock.getStockType(), targetCurrency);
            totalValue += stock.getQuantity() * rate;
        }
        return totalValue;
    }
}
'''
java.util.List is an interface. 
You shouldn't be able to instantiate a List object, you would need to create a class that implements list.
The private List<Stock> stocks variable should be instatiated as one of Java's List implementation types.
Java has ArrayList, LinkedList, Stack and Vector as built in List implementation classes.
Going to try and use LinkedList for this exercise, since I'm more familiar with that.
I think it would also be fine to use ArrayList. Might try doing that another time.