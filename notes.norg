Notes to take while I work on project

4/1/2025
Added basic setters and getters to Wallet class
Wrote a unit test for Wallet to test getters and setters
Will need to register my email with Open Exchange Rates for an API key
Going to read this article https://docs.openexchangerates.org/reference/api-introduction before starting work on CurrencyConverter
Wanted to learn more about the git stash command and now I'm going on a journey into the developer's tutorial in the Git documentation
That's something I had ought to work through in an editor as I read. I shouldn't get distracted right now. But that's something I want to make time for later.
Made my first API request in the browser! I have my API key now, and there's even some Java code provided in the documentation. Sweet!
Spoke too soon; the request I sent to /currencies.json went through because that doesn't need an API key. The key I got isn't working even after I verified my email.
Keep getting a 401 invalid_app_id error
Maybe this is something I should try and resolve tomorrow. I don't want to be using up all my requests if my key hasn't been validated yet.

4/3/2025
Going to see if API key will work today.
Still getting an invalid id error when making an API request in the browser documentation. Sent an email to support.
Going to try https://api.fixer.io/ 
Maybe not! Why would they want my street address?
Found an API to use at https://apiplugin.com/dashboard
Importing java.net.HttpURLConnection into CurrencyConverter. No idea how to use it but I will learn.
Found this resource to help write Java code (no example Java code in the CurrenctExchangeAPI documentation): https://www.omi.me/blogs/api-guides/how-to-fetch-currency-exchange-rates-using-exchangerate-api-in-java
Shouldn't use that Java library! Will be using this instead: https://docs.oracle.com/en/java/javase/24/docs/api/java.net.http/java/net/http/HttpRequest.html
Results from endpoint will be formatted as JSON, might need to import a library to handle that

4/4/2025
Found a free currency exchange api at https://www.exchangerate-api.com/
Will be using that for CurrencyConverter class

4/7/2025
Next big hurdle for CurrencyConverter is to parse the JSON request I will get back from the api.
I need the currency exchange rate from one currency to another. That value is in the request, I just need to pull it out and save it to a variable.
I think I should make sure I have Wallet working and tested before I import more stuff into this project though. I bet Java has a standard library for JSON objects.
Copilot's code for the Wallet class looks a little funny:
'''java
package com.codekata_wallet;

import java.util.List;

public class Wallet {
    private List<Stock> stocks;

    public Wallet(List<Stock> stocks) {
        this.stocks = stocks;
    }

    public List<Stock> getStocks() {
        return stocks;
    }

    // Placeholder for computing the wallet value
    public double getValue(String targetCurrency, CurrencyConverter converter) {
        double totalValue = 0.0;
        for (Stock stock : stocks) {
            double rate = converter.getExchangeRate(stock.getStockType(), targetCurrency);
            totalValue += stock.getQuantity() * rate;
        }
        return totalValue;
    }
}
'''
java.util.List is an interface. 
You shouldn't be able to instantiate a List object, you would need to create a class that implements list.
The private List<Stock> stocks variable should be instatiated as one of Java's List implementation types.
Java has ArrayList, LinkedList, Stack and Vector as built in List implementation classes.
Going to try and use LinkedList for this exercise, since I'm more familiar with that.
I think it would also be fine to use ArrayList. Might try doing that another time.
May need to do that sooner than later. I should rethink using a LinkedList for this problem.
From https://www.geeksforgeeks.org/applications-advantages-and-disadvantages-of-linked-list/:
"Slow Access Time: 
Accessing elements in a linked list can be slow, 
as you need to traverse the linked list to find the element you are looking for, which is an O(n) operation. 
This makes linked lists a poor choice for situations where you need to access elements quickly."
I don't want accessing one kind of Stock from the Wallet to be slower than accessing another kind.
I think a Dictionary would be well-suited to this problem, since Stocks are really just String:int pairs.
https://www.geeksforgeeks.org/java-util-dictionary-class-java/?ref=lbp

4/16/2025
Looking through my Java textbooks and some online resources, I think it would be best if I used an implementation class from the Map interface, rather than Dictionary.
I had a feeling I was getting my Python and Java wires crossed.
That java.util.Currency import leering at me as I scroll down to HashMap... let me do one thing at a time please T_T
Don't know if HashMap is right either. Since HashMap doesn't allow for duplicate keys, we can't add multiple Stocks of similar currency, I think.
https://www.geeksforgeeks.org/java-util-hashmap-in-java-with-examples/
Would a Set be the correct data structure to use for this problem? No specific order, but also no duplicate values allowed.
I'm thinking of a Wallet as something like [("USD", 20), ("EUR", 10), ("BTC", 15)] and I should be able to use a built-in Collections method to add a Stock of similar currency
So the Wallet could become something like [("USD", 20), ("EUR", 10), ("BTC", 15), ("USD", 50)] and the values of the similar currency would only need to be calculated when calling the getWalletValue() method
https://www.geeksforgeeks.org/arraylist-in-java/
Looking like ArrayList is what I'm looking for. I'm wondering if there's anything better though. The order of the Stocks in the Wallet isn't necessarily important.
Shodan's telling me to use a HashMap actually, and I am going to have to implement a method to add similar currency values when adding Stocks to the Wallet.
I guess it's right that it is more memory efficient not to have multiple entries of different quantities of the same currency.

4/17/2025
My focus today will be constructing the API request in CurrencyConverter.
I have an API and my key ready.
https://www.exchangerate-api.com/docs/java-currency-api
Before making the API call, I need to read about GSON and how to properly use it so I can parse the JSON object returned by my API request.
Modified my pom.xml file to include GSON as a dependency.
Fixed the Classpaths error I was getting by updating the maven.compiler.source and target to Java 24.
Should take a quick look at the rest of the pom.xml to make sure I don't have to come back and mess with it again later.
Need to make a better habit of error checking in my constructors. Can't let the AI humble me like that so often.
Reading up on how to properly construct a URL String in Java, and which libraries to import so I can do so.

4/18/2025
Ended up doing Wallet stuff yesterday, so today I'll work on CurrencyConverter like I intended.
Considering using Apache HttpComponents, but I'm wondering if I should try and stick with Java standard libraries as much as I can, as an exercise.
Will need to read up on best practices for passing in API keys to a project.
Things to do:
    * Validate and pass in an API key in CurrencyConverter
    * Implement HTTP client to use the constructed pair Exchange Uri and retrieve exchange rates from the third party API
    * Parse returned JSON object with GSON and save exchange rate to a variable, then return that variable
Learning how and why to store my API key in an environment variable. I know I shouldn't push my api key to version control (and I will continue trying not to)
Just wondering what's the best practice to follow, which I feel is sort of the theme of this.
I want to make a piece of software that fulfills a simple task, and is built as robustly and properly as I can manage. 

4/28/2025
It hasn't felt like ten days ðŸ’€
Going to start utilizing my Kanban board to keep track of this project
Implemented a method inside Wallet.java to remove Stocks from Wallet, and wrote my first try at a test method
I think the next biggest hurdle will be learning how to properly send an HTTP request to the exchange rate API in Java
The API validator class can wait, that should be easy enough. Just checking the length of a string and making sure there are no special characters
I lied, we're doing the API validator class before implementing the HTTP methods inside of CurrencyConvertor.
Learning about how to use a regular expression to match Strings against.
I need to check that supplied keys are the correct length and only contain characters from the necessary set (Upper/lowercase letters, numbers 0-9)

5/6/2025
ApiConfig.java is looking okay as it is. Next step is to implement it within CurrencyConverter to send out the API request.
First thing I need to learn is how to safely store and use my API key within this project repo.
AI assistant is advising me to use a Java.util.Properties file to hold information about the API key.
Will read the documentation before deciding if I need to import.
https://docs.oracle.com/javase/8/docs/api/java/util/Properties.html
Says this class has been around since JDK 1.0, so if I did import it, at least it would be something that's likely seen some practical use.
ApiConfig would need some refactoring to take advantage of the Properties class.
The temporary code in App.java is saying that my Api Key is not being properly configured the way things are right now...
Don't know if the environment variable containing the actual API key was set correctly.
Some online resources and Copilot are saying I should create a launch.json file and set the environment variable in there, making sure to include that file in the .gitignore of course
Was I right in picking Maven over Gradle as a Java build tool? I didn't have any particular reason to choose one over the other considering the modest scale of this project. Ugh...

5/13/2025
Created a launch.json file, temporary API test in main returns true. Think I'm ready to begin implementing the HTTP client now it seems I have the api key correctly stored in an environment variable.

5/15/2025
Reading up some more on environment variables and best practices for Java projects.
https://configu.com/blog/working-with-java-environment-variables-4-ways-to-set-variables/
https://stackoverflow.com/questions/29971572/how-do-i-add-environment-variables-to-launch-json-in-vscode#45426595
The HttpClient, HttpRequest and HttpResponse look set up correctly in CurrencyConverter.
https://openjdk.org/groups/net/httpclient/intro.html
Next thing to do will be to parse the JSON request returned by the API, and extract the object containing the value of the exchange rate between the pair of currencies.
Will be including gson as a dependency for this purpose
First I want to create a test class for ApiConfig and have those tests pass

7/22/2025
Having an issue with ApiConfig. I think that in the constructor, the first check fails, and the ${EXCHANGE_RATE_API_KEY} is being read literally into ApiConfig.apiKey.
The $ and {} are being caught by the IllegalArgumentException.
The question is, why isn't the environment variable being read, and the property is being read in as a string?

10/16/2025
Looking like today's lesson is that I should have been staying away from environment variables, and instead should have been using Java system properties.
From Sonnet: 
"
Key Differences:
    System.getenv() reads environment variables set at the OS level
    System.setProperty() sets Java system properties, which are different from environment variables
    You cannot modify environment variables at runtime using Java code
"
The tests are passing, I'm just curious where my actual API key is set as a Java system property.